{"mappings":"iiBAUA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SACpCC,EAA8CH,EAAtCI,SAAYC,EAAKF,EAALG,MAAOC,EAAIJ,EAAJK,KAAMC,EAAMN,EAANO,OAIjC,SAASC,EAAYC,EAAOC,GAC1B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAACN,QAAON,MAAAO,IAEhBM,EAAO,CAACP,QAAON,MAAAO,MAEhBA,MAXPb,EAAKqB,iBAAiB,UAetB,SAAsBC,GACpBA,EAAMC,iBAEN,IADA,IAAIC,EAAYC,OAAOpB,EAAMqB,OACpBC,EAAI,EAAGA,GAAKlB,EAAOiB,MAAOC,IACjChB,EAAYgB,EAAGH,GACZI,MAAK,SAAAC,G,IAAGjB,EAAKiB,EAALjB,MAAOkB,EAAKD,EAALvB,MAChByB,EAAAjC,GAASkC,OAAOC,QAAQ,qBAAiCC,OAAZtB,EAAM,QAAYsB,OAANJ,EAAM,UAE9DK,OAAM,SAAAN,G,IAAGjB,EAAKiB,EAALjB,MAAOwB,EAAKP,EAALvB,MACjByB,EAAAjC,GAASkC,OAAOK,QAAQ,oBAAgCH,OAAZtB,EAAM,QAAYsB,OAANE,EAAM,UAE9DZ,GAAaC,OAAOlB,EAAKmB,U","sources":["src/js/03-promises.js"],"sourcesContent":["// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) \n// стільки разів, скільки ввели в поле amount.Під час кожного виклику передай їй номер промісу(position), \n// що створюється, і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, \n// який виконується або відхиляється через delay часу.\n// Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay \n// зі значеннями однойменних параметрів.\n// Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\nimport Notiflix from 'notiflix';\n\nconst form = document.querySelector(\".form\")\nconst { elements: { delay, step, amount } } = form;\n\nform.addEventListener(\"submit\", onSubmitForm);\n  \nfunction makePromise(index, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({index, delay})\n      } else {\n        reject({index, delay})\n      }\n    }, delay);\n  });\n}\n\nfunction onSubmitForm(event) {\n  event.preventDefault()\n  let delayTime = Number(delay.value)\n  for (let i = 1; i <= amount.value; i++) {\n    makePromise(i, delayTime)\n      .then(({ index, delay }) => {\n      Notiflix.Notify.success(`Fulfilled promise ${index} in ${delay}ms`);\n      })\n      .catch(({ index, delay }) => {\n      Notiflix.Notify.failure(`Rejected promise ${index} in ${delay}ms`);\n      });\n      delayTime += Number(step.value);\n  };\n};"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$_elements","elements","$ce04d3a99e08e73b$var$delay","delay","$ce04d3a99e08e73b$var$step","step","$ce04d3a99e08e73b$var$amount","amount","$ce04d3a99e08e73b$var$makePromise","index","delay1","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delayTime","Number","value","i","then","param","delay2","$parcel$interopDefault","Notify","success","concat","catch","delay3","failure"],"version":3,"file":"03-promises.63af01f6.js.map"}