{"mappings":"qhBAUA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,UAC5BC,UAAUC,MAAEC,EAAKC,KAAEC,EAAIC,OAAEC,IAAaT,EAI9C,SAASU,EAAYC,EAAOC,GAC1B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,MAACN,EAAOP,MAAAQ,IAEhBM,EAAO,C,MAACP,EAAOP,MAAAQ,MAEhBA,MAXPZ,EAAKoB,iBAAiB,UAetB,SAAsBC,GACpBA,EAAMC,iBACN,IAAIC,EAAYC,OAAOnB,EAAMoB,OAC7B,IAAK,IAAIC,EAAI,EAAGA,GAAKjB,EAAOgB,MAAOC,IACjChB,EAAYgB,EAAGH,GACZI,MAAK,EAAChB,MAAEA,EAAOP,MAAAwB,MAChBC,EAAA/B,GAASgC,OAAOC,QAAQ,qBAAqBpB,QAAYiB,UAExDI,OAAM,EAACrB,MAAEA,EAAOP,MAAA6B,MACjBJ,EAAA/B,GAASgC,OAAOI,QAAQ,oBAAoBvB,QAAYsB,UAExDV,GAAaC,OAAOjB,EAAKkB,OAE7BzB,EAAKmC","sources":["src/js/03-promises.js"],"sourcesContent":["// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) \n// стільки разів, скільки ввели в поле amount.Під час кожного виклику передай їй номер промісу(position), \n// що створюється, і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, \n// який виконується або відхиляється через delay часу.\n// Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay \n// зі значеннями однойменних параметрів.\n// Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\nimport Notiflix from 'notiflix';\n\nconst form = document.querySelector(\".form\")\nconst { elements: { delay, step, amount } } = form;\n\nform.addEventListener(\"submit\", onSubmitForm);\n  \nfunction makePromise(index, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({index, delay})\n      } else {\n        reject({index, delay})\n      }\n    }, delay);\n  });\n}\n\nfunction onSubmitForm(event) {\n  event.preventDefault()\n  let delayTime = Number(delay.value)\n  for (let i = 1; i <= amount.value; i++) {\n    makePromise(i, delayTime)\n      .then(({ index, delay }) => {\n      Notiflix.Notify.success(`Fulfilled promise ${index} in ${delay}ms`);\n      })\n      .catch(({ index, delay }) => {\n      Notiflix.Notify.failure(`Rejected promise ${index} in ${delay}ms`);\n      });\n      delayTime += Number(step.value);\n  };\n  form.reset();\n};"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","elements","delay","$47d4ff9957288465$var$delay","step","$47d4ff9957288465$var$step","amount","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$makePromise","index","delay1","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delayTime","Number","value","i","then","delay2","$parcel$interopDefault","Notify","success","catch","delay3","failure","reset"],"version":3,"file":"03-promises.be38740f.js.map"}